-----------------------------------------------------------------------------------
CALCULATING MEDIAN:

Since there are 6912 orders - we want the average of the 3457 and 3456 order amounts when ordered.
This is the average of 2483.16 and 2482.55. This gives the median of 2482.855.
This obviously isn't an ideal way to compute. If we obtain new orders, we would have to change the limit.
SQL didn't even calculate the median for us. The above used a SUBQUERY,
 but you could use any method to find the two necessary values, and then you just need the average of them.


SELECT *
FROM (SELECT total_amt_usd
      FROM orders
      ORDER BY total_amt_usd
      LIMIT 3457) AS Table1
ORDER BY total_amt_usd DESC
LIMIT 2;

-----------------------------------------------------------------------------------

SELECT
	a.name AS account
    ,o.occurred_at AS date_order
FROM
	orders o
    JOIN accounts a
    ON o.account_id = a.id
ORDER BY date_order
LIMIT 1



SELECT
	a.name AS company_name
    ,SUM(o.total_amt_usd) AS total_sales
FROM
	orders o
    JOIN accounts a
    ON o.account_id = a.id
GROUP BY (a.name)


SELECT
	a.name AS account_name
    ,w.channel AS channel
    ,w.occurred_at AS date
FROM
	web_events w
    JOIN accounts a
    ON w.account_id = a.id
ORDER BY date DESC
LIMIT 1


SELECT
	s.name
   	,w.channel
    ,COUNT(*) AS count_occur
FROM web_events w
JOIN accounts a
ON w.account_id = a.id
JOIN sales_reps s
ON s.id = a.sales_rep_id
GROUP BY s.name, w.channel
ORDER BY count_occur DESC

---------------------------------------------------------------------------
How many of the sales reps have more than 5 accounts that they manage?

SELECT
	s.id
	,s.name
	,COUNT(*) AS num_accounts
FROM sales_reps s
JOIN accounts a
ON a.sales_rep_id = s.id
GROUP BY s.id, s.name
HAVING COUNT(*)>5
ORDER BY num_accounts

---------------------------------------------------------------------------
How many accounts have more than 20 orders?

SELECT
	a.id
  ,a.name
	,COUNT(*) AS num_accounts
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
HAVING COUNT(*)>20
ORDER BY num_accounts DESC

---------------------------------------------------------------------------
Which account has the most orders?

SELECT
	a.id
    ,a.name
	,COUNT(*) AS num_accounts
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
ORDER BY num_accounts DESC
LIMIT 1

---------------------------------------------------------------------------
Which accounts spent more than 30,000 usd total across all orders?

SELECT
	a.id
    ,a.name
	,SUM(total_amt_usd) AS account_spent
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
HAVING SUM(total_amt_usd) >30000
ORDER BY account_spent

---------------------------------------------------------------------------
Which accounts used facebook as a channel to contact customers more than 6 times?

SELECT
	a.id
    ,a.name
    ,w.channel
	,COUNT(*) AS num_contacts
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
WHERE channel = 'facebook'
GROUP BY a.id, a.name, w.channel
HAVING COUNT(*)>6
ORDER BY num_contacts



---------------------------------------------------------------------------
-------------------DATE_PART-----------------------------------------------
---------------------------------------------------------------------------



Find the sales in terms of total dollars for all orders in each year, ordered from greatest to least.
Do you notice any trends in the yearly sales totals?

SELECT
	DATE_PART('year', occurred_at) AS ord_year
	,SUM(total_amt_usd) AS total_spent
FROM orders
GROUP BY 1
ORDER BY 2 DESC

---------------------------------------------------------------------------
SELECT
  DATE_PART('month', occurred_at) ord_month
  ,SUM(total_amt_usd) total_spent
 FROM orders
 WHERE occurred_at BETWEEN '2014-01-01' AND '2017-01-01'
 GROUP BY 1
 ORDER BY 2 DESC;

---------------------------------------------------------------------------
 Which year did Parch & Posey have the greatest sales in terms of total number of
  orders? Are all years evenly represented by the dataset?



 SELECT
	DATE_PART('year', occurred_at) ord_year
    ,COUNT(*) AS num_orders
 FROM orders
 GROUP BY 1
 ORDER BY 2 DESC;


 ---------------------------------------------------------------------------
 In which month of which year did
 Walmart spend the most on gloss paper in terms of dollars?

 SELECT
	DATE_TRUNC('month', occurred_at) AS month_year
    ,SUM(gloss_amt_usd) AS spent_amount
FROM orders o
JOIN accounts a
ON a.id = o.account_id
WHERE a.name = 'Walmart'
GROUP BY 1
ORDER BY 2 DESC;

---------------------------------------------------------------------------
-------------------CASE STATEMENTS-----------------------------------------
---------------------------------------------------------------------------
Write a query to display for each order, the account ID,
total amount of the order, and the level of the order - ‘Large’ or ’Small’
 - depending on if the order is $3000 or more, or smaller than $3000.

SELECT
	account_id
    ,total_amt_usd
    ,CASE WHEN
    	total_amt_usd >3000 THEN 'Large'
        ELSE 'Small' END AS order_level
FROM orders;

---------------------------------------------------------------------------

Write a query to display the number of orders in each of three categories,
based on the total number of items in each order. The three categories are:
'At Least 2000', 'Between 1000 and 2000' and 'Less than 1000'.

SELECT
    CASE
    	WHEN total < 1000 THEN 'Less than 1000'
        WHEN total > 2000 THEN 'At Least 2000'
        ELSE 'Between 1000 and 2000' END AS categ,
        COUNT(*) AS order_count
FROM orders
GROUP BY 1;
---------------------------------------------------------------------------

We would like to understand 3 different levels of customers based on the amount
associated with their purchases. The top level includes anyone with a
Lifetime Value (total sales of all orders) greater than 200,000 usd.
The second level is between 200,000 and 100,000 usd.
The lowest level is anyone under 100,000 usd.
Provide a table that includes the level associated with each account.
You should provide the account name, the total sales of all orders for
the customer, and the level. Order with the top spending customers listed first.


SELECT
a.name,
SUM(total_amt_usd) AS total_sales,
CASE
    WHEN SUM(total_amt_usd) > 200000 THEN 'top level'
    WHEN SUM(total_amt_usd) < 100000 THEN 'low level'
    ELSE 'second level' END AS level
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY 1
ORDER BY total_sales DESC

---------------------------------------------------------------------------

We would now like to perform a similar calculation to the first,
but we want to obtain the total amount spent by customers only
in 2016 and 2017. Keep the same levels as in the previous question.
Order with the top spending customers listed first.

SELECT
a.name,
SUM(total_amt_usd) AS total_sales,
CASE
    WHEN SUM(total_amt_usd) > 200000 THEN 'top level'
    WHEN SUM(total_amt_usd) < 100000 THEN 'low level'
    ELSE 'middle level' END AS level
FROM accounts a
JOIN orders o
ON a.id = o.account_id
WHERE o.occurred_at BETWEEN '2016-01-01' AND '2018-01-01'
GROUP BY 1
ORDER BY total_sales DESC

---------------------------------------------------------------------------

We would like to identify top performing sales reps, which are sales
reps associated with more than 200 orders. Create a table with the
sales rep name, the total number of orders, and a column with top or
not depending on if they have more than 200 orders.
Place the top sales people first in your final table.

SELECT
s.name,
COUNT(*) as num_ordrs,
CASE
	WHEN COUNT(*) >200 THEN 'TOP'
    ELSE 'NOT' END AS sales_rep_level
FROM sales_reps s
	JOIN accounts a
	ON s.id = a.sales_rep_id
		JOIN orders o
		ON o.account_id = a.id
GROUP BY s.name
ORDER BY num_ordrs DESC

---------------------------------------------------------------------------

The previous didn't account for the middle, nor the dollar amount associated
with the sales. Management decides they want to see these characteristics
represented as well. We would like to identify top performing sales reps,
which are sales reps associated with more than 200 orders or more than 750000
in total sales. The middle group has any rep with more than 150 orders or
500000 in sales. Create a table with the sales rep name, the total number
of orders, total sales across all orders, and a column with top, middle,
or low depending on this criteria. Place the top sales people based on
dollar amount of sales first in your final table. You might see a few
upset sales people by this criteria!

SELECT
s.name,
COUNT(*) as num_ordrs,
SUM(o.total_amt_usd) AS sales,
CASE
	WHEN COUNT(*) >200 OR SUM(total_amt_usd)> 750000 THEN 'TOP'
    WHEN COUNT(*) BETWEEN 150 AND 200 OR SUM(total_amt_usd) BETWEEN 500000 AND 750000 THEN 'MIDDLE'
    ELSE 'LOW' END AS sales_rep_level
FROM sales_reps s
	JOIN accounts a
	ON s.id = a.sales_rep_id
		JOIN orders o
		ON o.account_id = a.id
GROUP BY s.name
ORDER BY 3 DESC
