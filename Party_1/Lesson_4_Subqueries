Build the Subquery: The aggregation of an existing table that you’d like to leverage as a part of the larger query.
Run the Subquery: Because a subquery can stand independently, it’s important to run its content first
to get a sense of whether this aggregation is the interim output you are expecting.
Encapsulate and Name: Close this subquery off with parentheses and call it something.
 In this case, we called the subquery table ‘sub.’ Test Again: Run a SELECT * within the larger query to determine
if all syntax of the subquery is good to go. Build Outer Query: Develop the SELECT * clause as you see fit to solve
the problem at hand, leveraging the subquery appropriately.


SELECT DATE_TRUNC('day',occurred_at) AS day,
       channel, COUNT(*) as events
FROM web_events
GROUP BY 1,2
ORDER BY 3 DESC;


SELECT *
FROM (SELECT DATE_TRUNC('day',occurred_at) AS day,
                channel, COUNT(*) as events
          FROM web_events
          GROUP BY 1,2
          ORDER BY 3 DESC) sub;


SELECT channel, AVG(events) AS average_events
FROM (SELECT DATE_TRUNC('day',occurred_at) AS day,
                channel, COUNT(*) as events
         FROM web_events
         GROUP BY 1,2) sub
GROUP BY channel
ORDER BY 2 DESC;

--------------------------------VIEWS---------------------------------------
create view v1
as
select S.id, S.name as Rep_Name, R.name as Region_Name
from sales_reps S
join region R
on S.region_id = R.id
and R.name = 'Northeast';


CREATE VIEW V2
AS
SELECT r.name region, a.name account,
       o.total_amt_usd/(o.total + 0.01) unit_price
FROM region r
JOIN sales_reps s
ON s.region_id = r.id
JOIN accounts a
ON a.sales_rep_id = s.id
JOIN orders o
ON o.account_id = a.id;


CREATE VIEW V3
AS
SELECT channel, AVG(events) AS average_events
FROM (SELECT DATE_TRUNC('day',occurred_at) AS day,
                channel, COUNT(*) as events
         FROM web_events
         GROUP BY 1,2) sub
GROUP BY channel


SELECT
	AVG(standard_qty) as standard_qty
	,AVG(gloss_qty) as gloss_qty
    ,AVG(poster_qty) as poster_qty
    ,SUM(total_amt_usd) as total
FROM orders
WHERE DATE_TRUNC('month', occurred_at) =
	(SELECT DATE_TRUNC('month', MIN(occurred_at)) as day
	FROM orders);


----------------------------------------------------------------------------------


What is the top channel used by each account to market products?
How often was the channel used?

Let's find the number of times each channel is used by each account.
So we will need to count the number of rows by Account and Channel.
This count will be our first aggregation needed.

SELECT t3.id, t3.name, t3.channel, t3.ct
FROM (SELECT
		a.id, a.name, w.channel, COUNT(*) ct
		FROM accounts a JOIN web_events w ON a.id=w.account_id
		GROUP BY 1,2,3) AS T3

JOIN (SELECT
		t1.id, t1.name, MAX(ct) max_chan
		FROM (SELECT
				a.id, a.name, w.channel, COUNT(*) ct
				FROM accounts a JOIN web_events w ON a.id=w.account_id
				GROUP BY 1,2,3) AS t1
	GROUP BY 1,2) AS t2

ON t2.id = t3.id AND t2.max_chan = t3.ct
ORDER BY 1,4;


----------------------------------------------------------------------------------
Provide the name of the sales_rep in each region with the largest amount of total_amt_usd sales.

SELECT t3.repr_name, t2.region_name, t2.max_sales
FROM
	(SELECT region_name, MAX(total_sales) max_sales
	FROM	(SELECT
				s.name repr_name
				,r.name region_name
				,SUM(o.total_amt_usd) total_sales
			FROM accounts a
			JOIN sales_reps s ON s.id =a.sales_rep_id
			JOIN orders o ON a.id = o.account_id
			JOIN region r ON r.id = s.region_id
			GROUP BY 1,2) AS t1
	GROUP BY 1) AS t2

JOIN
	(SELECT
		s.name repr_name
		,r.name region_name
		,SUM(o.total_amt_usd) total_sales
		FROM accounts a
		JOIN sales_reps s ON s.id =a.sales_rep_id
		JOIN orders o ON a.id = o.account_id
		JOIN region r ON r.id = s.region_id
		GROUP BY 1,2) AS t3
ON t2.region_name = t3.region_name AND t2.max_sales = t3.total_sales

-------------------------------------------------------------------------------
For the region with the largest (sum) of sales total_amt_usd, how many total
(count) orders were placed?

SELECT r.name region, COUNT(o.total) total_orders
FROM sales_reps s
JOIN accounts a ON a.sales_rep_id = s.id
JOIN orders o ON o.account_id = a.id
JOIN region r ON r.id =  s.region_id
GROUP BY 1

HAVING SUM(o.total_amt_usd) =
      (SELECT MAX(total_amt)
      FROM(SELECT r.name region, SUM(o.total_amt_usd) total_amt
      FROM sales_reps s
      JOIN accounts a ON a.sales_rep_id = s.id
      JOIN orders o ON o.account_id = a.id
      JOIN region r ON r.id =  s.region_id
      GROUP BY 1) sub )
-------------------------------------------------------------------------------


How many accounts had more total purchases than the account name which has bought
the most standard_qty paper throughout their lifetime as a customer?

SELECT COUNT(*)
FROM (SELECT a.name account_name
		FROM accounts a
		JOIN orders o
		ON o.account_id = a.id
		GROUP BY 1
		HAVING SUM(o.total) >
							(SELECT total
							FROM
								(SELECT
								a.name account_name
								,SUM(standard_qty) total_std
								,SUM(o.total) total
								FROM accounts a
									JOIN orders o
									ON o.account_id = a.id
								GROUP BY 1
								ORDER BY 2 DESC
								LIMIT 1) sub )
								) counter_tab;

-------------------------------------------------------------------------------

For the customer that spent the most (in total over their lifetime as a customer)
total_amt_usd, how many web_events did they have for each channel?


SELECT
	w.channel channel_name
	,a.name account_name
	,COUNT(*) events_count
FROM web_events w
JOIN accounts a
ON a.id = w.account_id AND a.id = (SELECT id
						FROM (SELECT
							a.id
							,a.name account_name
							,SUM(o.total_amt_usd) total_spent
						FROM accounts a
							JOIN orders o
							ON o.account_id = a.id
						GROUP BY 1,2
						ORDER BY 3 DESC
						LIMIT 1) inner_table)
GROUP BY 1,2
ORDER BY 3 DESC;

-------------------------------------------------------------------------------
What is the lifetime average amount spent in terms of total_amt_usd for the top 10 total spending accounts?

SELECT AVG(total_spent)
FROM
	(SELECT
		a.id
		,a.name account_name
		,SUM(o.total_amt_usd) total_spent
	FROM accounts a
		JOIN orders o
		ON o.account_id = a.id
	GROUP BY 1,2
	ORDER BY 3 DESC
	LIMIT 10) sub

-------------------------------------------------------------------------------

What is the lifetime average amount spent in terms of total_amt_usd, including only
the companies that spent more per order, on average, than the average of all orders.

SELECT AVG(avg_amt)
FROM	(SELECT o.account_id, AVG(o.total_amt_usd) avg_amt
		FROM orders o
		GROUP BY 1
		HAVING AVG(o.total_amt_usd) > (SELECT AVG(o.total_amt_usd)
										FROM orders o)) sub

	
