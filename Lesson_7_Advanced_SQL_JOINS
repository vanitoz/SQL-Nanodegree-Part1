*each account who has a sales rep and each sales rep that has an account
(all of the columns in these returned rows will be full)
*but also each account that does not have a sales rep
and each sales rep that does not have an account
 (some of the columns in these returned rows will be empty)

SELECT *
FROM accounts a FULL OUTER JOIN sales_reps s
ON a.sales_rep_id = s.id
WHERE a.sales_rep_id IS NULL OR s.id = NULL
----------------------------------------------------------------------------------

One of the most common use cases for self JOINs is in cases where two events occurred,
one after another. As you may have noticed in the previous video, using inequalities
in conjunction with self JOINs is common.

Modify the query from the previous video, which is pre-populated in the SQL Explorer below,
to perform the same interval analysis except for the web_events table. Also:

change the interval to 1 day to find those web events that occurred after, but not more
than 1 day after, another web event add a column for the channel variable in both
instances of the table in your query

SELECT o1.id AS o1_id,
       o1.account_id AS o1_account_id,
       o1.occurred_at AS o1_occurred_at,
       o2.id AS o2_id,
       o2.account_id AS o2_account_id,
       o2.occurred_at AS o2_occurred_at
  FROM orders o1
 LEFT JOIN orders o2
   ON o1.account_id = o2.account_id
  AND o2.occurred_at > o1.occurred_at
  AND o2.occurred_at <= o1.occurred_at + INTERVAL '28 days'
ORDER BY o1.account_id, o1.occurred_at

----------------------------------------------------------------------------------

SELECT w1.id AS we_id,
       w1.account_id AS w1_account_id,
       w1.occurred_at AS w1_occurred_at,
	   w1.channel AS we1_channel,
       w2.id AS w2_id,
       w2.account_id AS w2_account_id,
       w2.occurred_at AS w2_occurred_at,
	   w2.channel AS we2_channel
 FROM web_events w1
 LEFT JOIN web_events w2
   ON w1.id = w2.id
  AND w1.occurred_at > w2.occurred_at
  AND w1.occurred_at <= w2.occurred_at + INTERVAL '1 day'
ORDER BY w1.account_id, w1.occurred_at

-------------------------------UNIONS---------------------------------------------

SELECT o.occurred_at AS date,
       a.sales_rep_id,
       o.id AS order_id,
       we.id AS web_event_id
FROM   accounts a
JOIN   orders o
ON     o.account_id = a.id
JOIN   web_events we
ON     DATE_TRUNC('day', we.occurred_at) = DATE_TRUNC('day', o.occurred_at)
ORDER BY 1 DESC



(SELECT
    DISTINCT sender_id, send_to_id
FROM FriendRequest) T1
